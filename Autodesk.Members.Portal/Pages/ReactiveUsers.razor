@page "/reactive-user"
@inject HttpClient Http

<h2>Reactive users download (Blazor Step-by-Step)</h2>

<div id="controls" style="margin-bottom:1rem;">
    <label for="totalInput">Total forecasts:</label>
    <input type="number" id="totalInput" @bind="_total" min="1" step="1" style="width:4rem; margin-right:1rem;" />
    <button @onclick="StartStreaming" disabled="@_isRunning" style="padding:0.5rem 1rem; font-size:1rem; margin-right:0.5rem;">
        Start
    </button>
    <button @onclick="CancelStreaming" disabled="!_isRunning" style="padding:0.5rem 1rem; font-size:1rem;">
        Cancel
    </button>
</div>

<div id="progress-container" style="width:100%; background-color:#e0e0e0; border-radius:4px; overflow:hidden; margin-bottom:1rem; height:24px;">
    <div id="progress-bar" style="width:@_progress%; height:100%; background-color:#4caf50; text-align:center; color:white; line-height:24px; font-size:0.9rem; transition: width 0.1s ease;">
        @_progress%
    </div>
</div>

<div id="results" style="max-height:300px; overflow-y:auto; border:1px solid #ccc; padding:1rem; margin-bottom:1rem;">
    @foreach (var item in _items)
    {
        <div class="forecast-item" style="margin-bottom:0.5rem; padding:0.5rem; background:#f9f9f9; border:1px solid #ddd;">
            <h4 style="margin:0; font-size:1rem; color:#333;">Forecast @item.Index of @_total</h4>
            <div class="forecast-details" style="font-size:0.9rem; margin-left:1rem;">
                Date: @item.Date.ToLocalTime().ToString("d") —
                TempC: @item.TemperatureC° —
                TempF: @item.TemperatureF° —
                Summary: @item.Summary
            </div>
        </div>
    }
</div>

<div id="completion-message" style="font-size:1rem; color:#006400; margin-top:1rem;">
    @_completionMessage
</div>

<h3>Debug Output</h3>
<div id="debug" style="max-height:200px; overflow-y:auto; border:1px dashed #666; background:#f0f0f0; padding:0.5rem; font-family:monospace; font-size:0.85rem; white-space:pre-wrap; margin-bottom:1rem;">
    @_debug
</div>

@code {
    private int _total = 20;
    private bool _isRunning = false;
    private double _progress = 0.0;
    private string _debug = string.Empty;
    private string _completionMessage = string.Empty;
    private List<ForecastItem> _items = new();

    private CancellationTokenSource? _cts;

    private void LogDebug(string message)
    {
        var timestamp = DateTime.Now.ToString("HH:mm:ss");
        _debug += $"[{timestamp}] {message}\n";
        InvokeAsync(StateHasChanged);
    }

    private async Task StartStreaming()
    {
        _items.Clear();
        _debug = string.Empty;
        _completionMessage = string.Empty;
        _progress = 0.0;
        _isRunning = true;
        StateHasChanged();

        LogDebug($"Starting request for total={_total}");
        _cts = new CancellationTokenSource();
        var token = _cts.Token;

        try
        {
            LogDebug("Calling API (ruta relativa a mismo origen)");
            // Llamada a /WeatherForecast/batches?total=… (misma dirección base de la app)
            var apiUrl = $"http://localhost:5001/WeatherForecast/batches?total={_total}";
            using var response = await Http.GetAsync(apiUrl, HttpCompletionOption.ResponseHeadersRead, token);
            LogDebug($"API respondió con status {response.StatusCode}");
            response.EnsureSuccessStatusCode();

            var textBody = await response.Content.ReadAsStringAsync(token);
            LogDebug($"Full response text received ({textBody.Length} chars)");

            IList<IList<WeatherForecast>> allBatches;
            try
            {
                allBatches = System.Text.Json.JsonSerializer.Deserialize<IList<IList<WeatherForecast>>>(textBody,
                    new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true })
                    ?? Array.Empty<IList<WeatherForecast>>();
                LogDebug($"Parsed JSON into {allBatches.Count} batches");
            }
            catch (Exception ex)
            {
                LogDebug($"JSON.parse error: {ex.Message}");
                _isRunning = false;
                return;
            }

            var receivedItems = 0;
            foreach (var batch in allBatches)
            {
                foreach (var item in batch)
                {
                    if (token.IsCancellationRequested)
                        break;

                    receivedItems++;
                    _items.Add(new ForecastItem
                        {
                            Index = receivedItems,
                            Date = item.Date.ToLocalTime(),
                            TemperatureC = item.TemperatureC,
                            TemperatureF = item.TemperatureF,
                            Summary = item.Summary ?? string.Empty
                        });

                    _progress = (receivedItems / (double)_total) * 100.0;
                    LogDebug($"Updating UI for item {receivedItems}/{_total} with progress {_progress:F2}%");

                    await InvokeAsync(StateHasChanged);
                    await Task.Yield();
                }
                if (token.IsCancellationRequested)
                    break;
            }

            LogDebug("Streaming complete");
            _completionMessage = "All forecasts received.";
        }
        catch (OperationCanceledException)
        {
            LogDebug("Request canceled");
        }
        catch (Exception ex)
        {
            LogDebug($"Stream error: {ex.Message}");
        }
        finally
        {
            _isRunning = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void CancelStreaming()
    {
        if (_cts != null)
        {
            LogDebug("Cancel button clicked: canceling");
            _cts.Cancel();
        }
        _isRunning = false;
    }

    private class ForecastItem
    {
        public int Index { get; set; }
        public DateTime Date { get; set; }
        public int TemperatureC { get; set; }
        public int TemperatureF { get; set; }
        public string Summary { get; set; } = string.Empty;
    }

    private class WeatherForecast
    {
        public DateTime Date { get; set; }
        public int TemperatureC { get; set; }
        public int TemperatureF { get; set; }
        public string? Summary { get; set; }
    }
}
