@page "/MembersList"
@using Application.Common.Pagination
@using Autodesk.Domain
@using Autodesk.Shared.Models
@using Autodesk.Shared.Pagination
@using Microsoft.AspNetCore.WebUtilities
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject IJSRuntime JS
<div class="members-container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3 class="mb-0 section-title">People</h3>
        <div class="d-flex align-items-center">
            <button class="btn create-btn" data-tooltip="Create new member" @onclick="Create">
                <svg fill="#000000" width="24" height="24" viewBox="0 0 24 24" id="add-user-5" data-name="Line Color" xmlns="http://www.w3.org/2000/svg" class="icon line-color">
                    <path id="secondary" d="M17,17h4m-2-2v4" style="fill: none; stroke: rgb(44, 169, 188); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;"></path>
                    <path id="primary" d="M15,13.1a4.71,4.71,0,0,0-1-.1H8a5,5,0,0,0-5,5v1s2,2,8,2a22,22,0,0,0,3-.19c.35,0,.69-.1,1-.17" style="fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;"></path>
                    <circle id="primary-2" data-name="primary" cx="11" cy="8" r="5" style="fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;"></circle>
                </svg>
                <span class="visually-hidden">Create</span>
            </button>
             @if (!Downloading)
            {
                <button class="btn create-btn" @onclick="DownloadAllAsync">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="#000000" viewBox="0 0 24 24">
                        <path d="M5 20h14v-2H5v2zm7-18l-7 7h4v4h6v-4h4l-7-7z" />
                    </svg>
                </button>
            }
            else
            {
                <button class="btn btn-warning ms-2" @onclick="CancelDownload">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="#000000" viewBox="0 0 24 24">
                        <path d="M6 6l12 12M6 18L18 6" stroke="#000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                    </svg>
                </button>
            }
            @if (Downloading)
            {
                <div class="progress ms-3" style="width:200px; height: 1rem;">
                    <div class="progress-bar" role="progressbar" style="width:@Progress%;">@Progress%</div>
                </div>
            }

            <input class="form-control search-input"
            placeholder="Search by name..."
            @bind="FilterName"
            @bind:event="oninput"
            @onkeydown="HandleKeyDown"/>
            <button class="btn search-btn" @onclick="OnSearch">
                <svg fill="#000000" width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path d="M12.027 9.92L16 13.95 14 16l-4.075-3.976A6.465 6.465 0 0 1 6.5 13C2.91 13 0 10.083 0 6.5 0 2.91 2.917 0 6.5 0 10.09 0 13 2.917 13 6.5a6.463 6.463 0 0 1-.973 3.42zM1.997 6.452c0 2.48 2.014 4.5 4.5 4.5 2.48 0 4.5-2.015 4.5-4.5 0-2.48-2.015-4.5-4.5-4.5-2.48 0-4.5 2.014-4.5 4.5z" fill-rule="evenodd" />
                </svg>
                <i class="fas fa-search" aria-hidden="true"></i>
            </button>
        </div>
    </div>

    <div class="row g-4">
        @foreach (var u in Users)
        {
            <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                <div class="user-card h-100 shadow-lg">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title text-truncate">@u.Name @u.Lastname</h5>
                        <p class="card-text text-truncate">@u.Email</p>
                        <div class="mt-auto d-flex justify-content-end">
                            <button class="btn btn-edit" @onclick="() => Edit(u.Id)">
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M9 5H7C5.89543 5 5 5.89543 5 7V19C5 20.1046 5.89543 21 7 21H9M15 5H17C18.1046 5 19 5.89543 19 7V9" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                    <path d="M14.902 20.3343L12.7153 20.7716L13.1526 18.585C13.1914 18.3914 13.2865 18.2136 13.4261 18.074L17.5 14L19.5 12L21.4869 13.9869L19.4869 15.9869L15.413 20.0608C15.2734 20.2004 15.0956 20.2956 14.902 20.3343Z" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                    <path d="M9 5C9 3.89543 9.89543 3 11 3H13C14.1046 3 15 3.89543 15 5V7H9V5Z" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                </svg>
                                <span class="visually-hidden">Edit</span>
                            </button>
                            <button class="btn btn-delete" @onclick="() => Delete(u.Id)">
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M10 12V17" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                    <path d="M14 12V17" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                    <path d="M4 7H20" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                    <path d="M6 10V18C6 19.6569 7.34315 21 9 21H15C16.6569 21 18 19.6569 18 18V10" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                    <path d="M9 5C9 3.89543 9.89543 3 11 3H13C14.1046 3 15 3.89543 15 5V7H9V5Z" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                </svg>
                                <span class="visually-hidden">Delete</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="text-center mt-4">
        @if (!hasUsers)
        {
            <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                <div class="user-card h-100 shadow-lg">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title text-truncate">No users found.</h5>
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="text-center mt-4">
        @if (!hasMore)
        {
            <button class="btn load-more-btn px-5" @onclick="LoadMore" disabled="@Loading">
                @if (Loading)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                }
                Load More
            </button>
        }
    </div>
</div>
@code {
    private List<User> Users { get; set; } = new();
    private string? NextCursor;
    private bool Loading;
    private string FilterName = string.Empty;
    private DotNetObjectReference<MembersList>? _dotNetRef;
    private bool hasMore => NextCursor is not null;
    private bool hasUsers => Users != null && Users.Any();
    private bool Downloading;
    private CancellationTokenSource? _downloadCts;
    private int Progress;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("registerScrollHandler", _dotNetRef);
        }
    }

    [JSInvokable]
    public async Task OnScrollHandler()
    {
        if (!Loading && NextCursor is not null)
        {
            await LoadMore();
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await ResetAndLoad();
    }

    private async Task OnSearch()
    {
        await ResetAndLoad();
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await OnSearch();
        }
    }

    private async Task ResetAndLoad()
    {
        Users.Clear();
        NextCursor = null;
        await LoadMore();
    }

    private async Task LoadMore()
    {
        Loading = true;
        var client = HttpClientFactory.CreateClient("AutodeskApi");
        var qp = new UserQueryParams
            {
                Name = FilterName,
                Cursor = NextCursor,
                PageSize = PaginationDefaults.DefaultPageSize
            };

        var queryParams = new Dictionary<string, string?>();

        if (!string.IsNullOrWhiteSpace(qp.Id))
        {
            queryParams["id"] = qp.Id;
        }
        if (!string.IsNullOrWhiteSpace(qp.Name))
        {
            queryParams["name"] = qp.Name;
        }
        if (!string.IsNullOrWhiteSpace(qp.Cursor))
        {
            queryParams["cursor"] = qp.Cursor;
        }
        queryParams["PageSize"] = qp.PageSize.ToString();

        var url = QueryHelpers.AddQueryString("api/v1/users", queryParams);
        var page = await client.GetFromJsonAsync<PagedResult<User>>(url);
        if (page != null)
        {
            Users.AddRange(page.Items);
            NextCursor = page.NextCursor;
        }
        Loading = false;
    }

    private void Create()
    {
        Navigation.NavigateTo($"/UserForm");
    }

    private void Edit(string id)
    {
        Navigation.NavigateTo($"/UserForm/{id}");
    }


    private async Task Delete(string id)
    {
        bool confirmed = await JS.InvokeAsync<bool>(
            "confirm",
            "Are you sure you want to delete this user?"
        );
        if (!confirmed)
        {
            return;
        }
            

        var client = HttpClientFactory.CreateClient("AutodeskApi");
        var response = await client.DeleteAsync($"api/v1/users/{Uri.EscapeDataString(id)}");

        if (response.IsSuccessStatusCode)
        {
            var userToRemove = Users.FirstOrDefault(u => u.Id == id);
            if (userToRemove != null)
                Users.Remove(userToRemove);
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.Error.WriteLine($"Delete failed: {response.StatusCode} – {error}");
            await JS.InvokeVoidAsync("alert", "Failed to delete the user. Please try again.");
        }
    }

    private async Task DownloadAllAsync()
    {
        if (Downloading) return;

        Downloading = true;
        Progress = 0;
        _downloadCts = new CancellationTokenSource();

        try
        {
            var client = HttpClientFactory.CreateClient("AutodeskApi");

            // Start GET request, but only read headers first
            using var response = await client.GetAsync(
                "api/v1/reactive",
                HttpCompletionOption.ResponseHeadersRead,
                _downloadCts.Token
            );

            response.EnsureSuccessStatusCode();

            // Get total size from headers (if available)
            var contentLength = response.Content.Headers.ContentLength;

            // Open response stream
            await using var responseStream = await response.Content.ReadAsStreamAsync(_downloadCts.Token);

            // Read stream in chunks
            var totalBytesRead = 0L;
            var buffer = new byte[8192];
            var bytesRead = 0;
            using var ms = new MemoryStream();

            while ((bytesRead = await responseStream.ReadAsync(buffer, 0, buffer.Length, _downloadCts.Token)) > 0)
            {
                ms.Write(buffer, 0, bytesRead);
                totalBytesRead += bytesRead;

                if (contentLength.HasValue)
                {
                    Progress = (int)((totalBytesRead * 100L) / contentLength.Value);
                }
                else
                {
                    // If Content-Length is not provided, use indeterminate style (just show 100 when done)
                    Progress = 50; // mid‐point visual
                }
                StateHasChanged();
            }

            // If no content length, set to 100 at the end
            if (!contentLength.HasValue)
            {
                Progress = 100;
                StateHasChanged();
            }

            // Convert downloaded bytes to string (JSON)
            ms.Seek(0, SeekOrigin.Begin);
            string json;
            using (var reader = new StreamReader(ms, leaveOpen: true))
            {
                json = await reader.ReadToEndAsync();
            }

            // Trigger file download via JS
            await JS.InvokeVoidAsync("downloadFileFromText", "all-users.json", json);
        }
        catch (OperationCanceledException)
        {
            // Download was canceled
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Download error: {ex.Message}");
            await JS.InvokeVoidAsync("alert", "An error occurred while downloading.");
        }
        finally
        {
            Downloading = false;
            Progress = 0;
            _downloadCts?.Dispose();
            _downloadCts = null;
            StateHasChanged();
        }
    }

    private void CancelDownload()
    {
        if (_downloadCts != null && !_downloadCts.IsCancellationRequested)
        {
            _downloadCts.Cancel();
        }
    }
}
